DROP TABLE IF EXISTS article, users, user_to_article;

create TABLE article
(
    id          int primary key generated by default as identity,
    name        text,
    date        date,
    text        text
    
);

CREATE TABLE users
(
    id          int primary key generated by default as identity,
    nickname    text,
    date_reg    text
);

CREATE TABLE user_to_article
(
    article_id      int REFERENCES article,
    users_id         int REFERENCES users,
    PRIMARY KEY (article_id, users_id)

);

INSERT INTO article(name, date, text)
VALUES ('Новости', '2023-01-15', 'Ракета полетела в космос'),
       ('Отзыв', '2024-07-22', 'мне понравилась эта мультиварка!'),
       ('Как высыпаться', '2020-10-10', 'Я не знаю...');

INSERT INTO users(nickname, date_reg)
VALUES ('vovavovv', '2009-01-01'),
       ('none_1', '2011-11-11'),
       ('papa', '2000-01-01'),
       ('mama', '2020-01-02');

INSERT INTO user_to_article(article_id, users_id)
VALUES (1, 1),
       (1, 2),
       (1, 3),
       (2, 3);

SELECT
    us.id,
    us.nickname,
    us.date_reg,
    coalesce(json_agg(json_build_object(
        'id', a.id, 
        'name', a.name,
        'date', a.date, 
        'text', a.text))filter (where a.id is not null), '[]') as article
FROM users us
LEFT JOIN user_to_article ua on us.id = ua.users_id
LEFT JOIN article a on a.id = ua.article_id
GROUP BY us.id;


SELECT
    a.id,
    a.name,
    a.date,
    a.text,
    coalesce(json_agg(json_build_object(
        'id', us.id, 'nickname', us.nickname, 'дата регистрации', us.date_reg))
filter (where us.id is not null), '[]') as users
from article a
left join user_to_article ua on a.id = ua.article_id
left join users us on us.id = ua.users_id
group by a.id;