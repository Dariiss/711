DROP TABLE IF EXISTS agregator, taxist, agregator_to_taxist;

create TABLE agregator
(
    id          int primary key generated by default as identity,
    name        text,
    phone       text
);

CREATE TABLE taxist
(
    id          int primary key generated by default as identity,
    last_name   text,
    first_name  text,
    phone       text,
    car         text
);

CREATE TABLE agregator_to_taxist
(
    agregator_id      int REFERENCES agregator,
    taxist_id         int REFERENCES taxist,
    PRIMARY KEY (agregator_id, taxist_id)

);

INSERT INTO agregator(name, phone)
VALUES ('Яндекс', '+79181156483'),
       ('Гони.ру', '89031234567'),
       ('Дешево-небезопасно', '89552143510');

INSERT INTO taxist(last_name, first_name, phone, car)
VALUES ('Попов', 'Владимир', '+7812343829', 'Porche'),
       ('Коньков', 'Максим', '898145829', 'лада'),
       ('Шалымова', 'Арина', '+781111111', 'БМВ'),
       ('Гущарин', 'Владимир', '891834567123', 'Лада');

INSERT INTO agregator_to_taxist(agregator_id, taxist_id)
VALUES (1, 1),
       (1, 2),
       (1, 3),
       (2, 3);

SELECT
    t.id,
    t.last_name,
    t.first_name,
    t.phone,
    t.car,
    coalesce(json_agg(json_build_object(
        'id', ag.id, 
        'name', ag.name,
        'phone', ag.phone))filter (where ag.id is not null), '[]') as agregator
FROM taxist t
LEFT JOIN agregator_to_taxist agt on t.id = agt.taxist_id
LEFT JOIN agregator ag on ag.id = agt.agregator_id
GROUP BY t.id;


SELECT
    ag.id,
    ag.name,
    ag.phone,
    coalesce(json_agg(json_build_object(
        'id', t.id, 
        'last name', t.last_name,
        'first name', t.first_name,
        'phone', t.phone, 
        'car', t.car))
filter (where t.id is not null), '[]') as taxist
from agregator ag
left join agregator_to_taxist agt on ag.id = agt.agregator_id
left join taxist t on t.id = agt.taxist_id
group by ag.id;